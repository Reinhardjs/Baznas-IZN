package com.karyastudio.izn.dao.generateSchema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PETUGAS".
*/
public class PetugasDao extends AbstractDao<Petugas, Void> {

    public static final String TABLENAME = "PETUGAS";

    /**
     * Properties of entity Petugas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property U_id = new Property(0, String.class, "u_id", false, "U_ID");
        public final static Property U_username = new Property(1, String.class, "u_username", false, "U_USERNAME");
        public final static Property U_name = new Property(2, String.class, "u_name", false, "U_NAME");
        public final static Property U_email = new Property(3, String.class, "u_email", false, "U_EMAIL");
        public final static Property U_phone = new Property(4, String.class, "u_phone", false, "U_PHONE");
        public final static Property U_rule = new Property(5, String.class, "u_rule", false, "U_RULE");
        public final static Property U_status = new Property(6, String.class, "u_status", false, "U_STATUS");
    }


    public PetugasDao(DaoConfig config) {
        super(config);
    }
    
    public PetugasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PETUGAS\" (" + //
                "\"U_ID\" TEXT NOT NULL ," + // 0: u_id
                "\"U_USERNAME\" TEXT NOT NULL ," + // 1: u_username
                "\"U_NAME\" TEXT NOT NULL ," + // 2: u_name
                "\"U_EMAIL\" TEXT NOT NULL ," + // 3: u_email
                "\"U_PHONE\" TEXT NOT NULL ," + // 4: u_phone
                "\"U_RULE\" TEXT NOT NULL ," + // 5: u_rule
                "\"U_STATUS\" TEXT NOT NULL );"); // 6: u_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PETUGAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Petugas entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getU_id());
        stmt.bindString(2, entity.getU_username());
        stmt.bindString(3, entity.getU_name());
        stmt.bindString(4, entity.getU_email());
        stmt.bindString(5, entity.getU_phone());
        stmt.bindString(6, entity.getU_rule());
        stmt.bindString(7, entity.getU_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Petugas entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getU_id());
        stmt.bindString(2, entity.getU_username());
        stmt.bindString(3, entity.getU_name());
        stmt.bindString(4, entity.getU_email());
        stmt.bindString(5, entity.getU_phone());
        stmt.bindString(6, entity.getU_rule());
        stmt.bindString(7, entity.getU_status());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Petugas readEntity(Cursor cursor, int offset) {
        Petugas entity = new Petugas( //
            cursor.getString(offset + 0), // u_id
            cursor.getString(offset + 1), // u_username
            cursor.getString(offset + 2), // u_name
            cursor.getString(offset + 3), // u_email
            cursor.getString(offset + 4), // u_phone
            cursor.getString(offset + 5), // u_rule
            cursor.getString(offset + 6) // u_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Petugas entity, int offset) {
        entity.setU_id(cursor.getString(offset + 0));
        entity.setU_username(cursor.getString(offset + 1));
        entity.setU_name(cursor.getString(offset + 2));
        entity.setU_email(cursor.getString(offset + 3));
        entity.setU_phone(cursor.getString(offset + 4));
        entity.setU_rule(cursor.getString(offset + 5));
        entity.setU_status(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Petugas entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Petugas entity) {
        return null;
    }

    @Override
    public boolean hasKey(Petugas entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
