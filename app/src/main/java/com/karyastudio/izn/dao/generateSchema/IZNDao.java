package com.karyastudio.izn.dao.generateSchema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IZN".
*/
public class IZNDao extends AbstractDao<IZN, Void> {

    public static final String TABLENAME = "IZN";

    /**
     * Properties of entity IZN.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Fi_id = new Property(0, String.class, "fi_id", false, "FI_ID");
        public final static Property Fi_code = new Property(1, String.class, "fi_code", false, "FI_CODE");
        public final static Property Fi_date_created = new Property(2, String.class, "fi_date_created", false, "FI_DATE_CREATED");
        public final static Property Fi_date_updated = new Property(3, String.class, "fi_date_updated", false, "FI_DATE_UPDATED");
        public final static Property Fi_jenis_lembaga = new Property(4, String.class, "fi_jenis_lembaga", false, "FI_JENIS_LEMBAGA");
    }


    public IZNDao(DaoConfig config) {
        super(config);
    }
    
    public IZNDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IZN\" (" + //
                "\"FI_ID\" TEXT NOT NULL ," + // 0: fi_id
                "\"FI_CODE\" TEXT NOT NULL ," + // 1: fi_code
                "\"FI_DATE_CREATED\" TEXT NOT NULL ," + // 2: fi_date_created
                "\"FI_DATE_UPDATED\" TEXT NOT NULL ," + // 3: fi_date_updated
                "\"FI_JENIS_LEMBAGA\" TEXT NOT NULL );"); // 4: fi_jenis_lembaga
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IZN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IZN entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFi_id());
        stmt.bindString(2, entity.getFi_code());
        stmt.bindString(3, entity.getFi_date_created());
        stmt.bindString(4, entity.getFi_date_updated());
        stmt.bindString(5, entity.getFi_jenis_lembaga());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IZN entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFi_id());
        stmt.bindString(2, entity.getFi_code());
        stmt.bindString(3, entity.getFi_date_created());
        stmt.bindString(4, entity.getFi_date_updated());
        stmt.bindString(5, entity.getFi_jenis_lembaga());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public IZN readEntity(Cursor cursor, int offset) {
        IZN entity = new IZN( //
            cursor.getString(offset + 0), // fi_id
            cursor.getString(offset + 1), // fi_code
            cursor.getString(offset + 2), // fi_date_created
            cursor.getString(offset + 3), // fi_date_updated
            cursor.getString(offset + 4) // fi_jenis_lembaga
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IZN entity, int offset) {
        entity.setFi_id(cursor.getString(offset + 0));
        entity.setFi_code(cursor.getString(offset + 1));
        entity.setFi_date_created(cursor.getString(offset + 2));
        entity.setFi_date_updated(cursor.getString(offset + 3));
        entity.setFi_jenis_lembaga(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(IZN entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(IZN entity) {
        return null;
    }

    @Override
    public boolean hasKey(IZN entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
