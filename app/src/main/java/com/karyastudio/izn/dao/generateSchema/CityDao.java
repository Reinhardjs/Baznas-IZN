package com.karyastudio.izn.dao.generateSchema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Void> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pro_id = new Property(0, String.class, "pro_id", false, "PRO_ID");
        public final static Property Pro_code = new Property(1, String.class, "pro_code", false, "PRO_CODE");
        public final static Property Cit_code = new Property(2, String.class, "cit_code", false, "CIT_CODE");
        public final static Property Pro_province = new Property(3, String.class, "pro_province", false, "PRO_PROVINCE");
        public final static Property Pro_city = new Property(4, String.class, "pro_city", false, "PRO_CITY");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"PRO_ID\" TEXT NOT NULL ," + // 0: pro_id
                "\"PRO_CODE\" TEXT NOT NULL ," + // 1: pro_code
                "\"CIT_CODE\" TEXT NOT NULL ," + // 2: cit_code
                "\"PRO_PROVINCE\" TEXT NOT NULL ," + // 3: pro_province
                "\"PRO_CITY\" TEXT NOT NULL );"); // 4: pro_city
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPro_id());
        stmt.bindString(2, entity.getPro_code());
        stmt.bindString(3, entity.getCit_code());
        stmt.bindString(4, entity.getPro_province());
        stmt.bindString(5, entity.getPro_city());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPro_id());
        stmt.bindString(2, entity.getPro_code());
        stmt.bindString(3, entity.getCit_code());
        stmt.bindString(4, entity.getPro_province());
        stmt.bindString(5, entity.getPro_city());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.getString(offset + 0), // pro_id
            cursor.getString(offset + 1), // pro_code
            cursor.getString(offset + 2), // cit_code
            cursor.getString(offset + 3), // pro_province
            cursor.getString(offset + 4) // pro_city
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setPro_id(cursor.getString(offset + 0));
        entity.setPro_code(cursor.getString(offset + 1));
        entity.setCit_code(cursor.getString(offset + 2));
        entity.setPro_province(cursor.getString(offset + 3));
        entity.setPro_city(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(City entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(City entity) {
        return null;
    }

    @Override
    public boolean hasKey(City entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
