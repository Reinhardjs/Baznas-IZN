package com.karyastudio.izn.dao.generateSchema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KDZQUEUE".
*/
public class KDZQueueDao extends AbstractDao<KDZQueue, String> {

    public static final String TABLENAME = "KDZQUEUE";

    /**
     * Properties of entity KDZQueue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Fk_id = new Property(0, String.class, "fk_id", true, "FK_ID");
        public final static Property Fk_date_created = new Property(1, String.class, "fk_date_created", false, "FK_DATE_CREATED");
        public final static Property Fk_date_updated = new Property(2, String.class, "fk_date_updated", false, "FK_DATE_UPDATED");
        public final static Property Fk_nama = new Property(3, String.class, "fk_nama", false, "FK_NAMA");
        public final static Property CountKeluarga = new Property(4, String.class, "countKeluarga", false, "COUNT_KELUARGA");
    }


    public KDZQueueDao(DaoConfig config) {
        super(config);
    }
    
    public KDZQueueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KDZQUEUE\" (" + //
                "\"FK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: fk_id
                "\"FK_DATE_CREATED\" TEXT NOT NULL ," + // 1: fk_date_created
                "\"FK_DATE_UPDATED\" TEXT NOT NULL ," + // 2: fk_date_updated
                "\"FK_NAMA\" TEXT NOT NULL ," + // 3: fk_nama
                "\"COUNT_KELUARGA\" TEXT NOT NULL );"); // 4: countKeluarga
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KDZQUEUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KDZQueue entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFk_id());
        stmt.bindString(2, entity.getFk_date_created());
        stmt.bindString(3, entity.getFk_date_updated());
        stmt.bindString(4, entity.getFk_nama());
        stmt.bindString(5, entity.getCountKeluarga());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KDZQueue entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFk_id());
        stmt.bindString(2, entity.getFk_date_created());
        stmt.bindString(3, entity.getFk_date_updated());
        stmt.bindString(4, entity.getFk_nama());
        stmt.bindString(5, entity.getCountKeluarga());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public KDZQueue readEntity(Cursor cursor, int offset) {
        KDZQueue entity = new KDZQueue( //
            cursor.getString(offset + 0), // fk_id
            cursor.getString(offset + 1), // fk_date_created
            cursor.getString(offset + 2), // fk_date_updated
            cursor.getString(offset + 3), // fk_nama
            cursor.getString(offset + 4) // countKeluarga
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KDZQueue entity, int offset) {
        entity.setFk_id(cursor.getString(offset + 0));
        entity.setFk_date_created(cursor.getString(offset + 1));
        entity.setFk_date_updated(cursor.getString(offset + 2));
        entity.setFk_nama(cursor.getString(offset + 3));
        entity.setCountKeluarga(cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(KDZQueue entity, long rowId) {
        return entity.getFk_id();
    }
    
    @Override
    public String getKey(KDZQueue entity) {
        if(entity != null) {
            return entity.getFk_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KDZQueue entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
